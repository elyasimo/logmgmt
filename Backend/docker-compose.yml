version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./Backend:/app/Backend
    environment:
      - DATABASE_URL=postgresql://loguser:logpassword@db:5432/logdb
      - PYTHONPATH=/app
      - POSTGRES_DB=logdb
      - POSTGRES_USER=loguser
      - POSTGRES_PASSWORD=logpassword
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - JWT_SECRET_KEY=H8md0llah2025
    depends_on:
      - db
    networks:
      - log_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  test-client:
    build:
      context: .
      dockerfile: Backend/Dockerfile
    depends_on:
      - rsyslog
    networks:
      - log_network
    environment:
      - RSYSLOG_HOST=rsyslog
      - RSYSLOG_PORT=5014
    command: python /app/Backend/generate_logs.py

  rsyslog:
    build:
      context: ./Backend/rsyslog
      dockerfile: Dockerfile
    ports:
      - "5014-5017:5014-5017"
    volumes:
      - rsyslog_logs:/var/log/rsyslog
    networks:
      - log_network

  fluent-bit:
    build:
      context: ./Backend/fluent-bit
      dockerfile: Dockerfile
    ports:
      - "5170:5170"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - log_network

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=loguser
      - POSTGRES_PASSWORD=logpassword
      - POSTGRES_DB=logdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - log_network

networks:
  log_network:
    driver: bridge

volumes:
  postgres_data:
  rsyslog_logs:

